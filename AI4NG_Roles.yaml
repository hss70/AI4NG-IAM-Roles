AWSTemplateFormatVersion: '2010-09-09'
Description: Application IAM Roles for AI4NG Project - Deploy after CI/CD roles

Parameters:
  ProjectName:
    Type: String
    Default: AI4NG
    Description: Project name for resource naming
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment for resource patterns

Resources:

  # Lambda Execution Role for Classifier Service
  ClassifierLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-Classifier-LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FBCSP*
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EEGProcessingStatus
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub arn:aws:s3:::ai4ng-${Environment}-*/*

  # Upload Lambda Role
  UploadLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-Upload-LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: S3WriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: 
                  - !Sub arn:aws:s3:::ai4ngstore-${Environment}-*/*

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ECS-TaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::ai4ngstore-${Environment}-*
                  - !Sub arn:aws:s3:::ai4ngstore-${Environment}-*/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:aws:s3:::ai4ng-${Environment}-*/*
        - PolicyName: DynamoDBStatusUpdate
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: 
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EEGProcessingStatus
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  # Step Function Execution Role
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-StepFunction-ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-ECS-TaskExecutionRole
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctions*
              - Effect: Allow
                Action:
                  - s3:HeadObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub arn:aws:s3:::ai4ngstore-${Environment}-*
                  - !Sub arn:aws:s3:::ai4ngstore-${Environment}-*/*
                  - !Sub arn:aws:s3:::ai4ng-${Environment}-*
                  - !Sub arn:aws:s3:::ai4ng-${Environment}-*/*
              - Effect: Allow
                Action: dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EEGProcessingStatus
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'

  # Cognito Authenticated User Role
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-Cognito-AuthenticatedRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Sub '${AWS::Region}:*'
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'

  # API Gateway Logs Resource Policy
  ApiGatewayLogsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub ${ProjectName}-ApiGateway-LogsPolicy
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/http-api/*"
            }
          ]
        }

Outputs:
  ClassifierLambdaExecutionRoleArn:
    Description: ARN of Classifier Lambda Execution Role
    Value: !GetAtt ClassifierLambdaExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-ClassifierLambdaRole-Arn

  UploadLambdaRoleArn:
    Description: ARN of Upload Lambda Role
    Value: !GetAtt UploadLambdaRole.Arn
    Export:
      Name: !Sub ${ProjectName}-UploadLambdaRole-Arn

  ECSTaskExecutionRoleArn:
    Description: ARN of ECS Task Execution Role
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-ECSTaskExecutionRole-Arn

  StepFunctionExecutionRoleArn:
    Description: ARN of Step Function Execution Role
    Value: !GetAtt StepFunctionExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-StepFunctionExecutionRole-Arn

  CognitoAuthenticatedRoleArn:
    Description: ARN of Cognito Authenticated User Role
    Value: !GetAtt CognitoAuthenticatedRole.Arn
    Export:
      Name: !Sub ${ProjectName}-CognitoAuthenticatedRole-Arn